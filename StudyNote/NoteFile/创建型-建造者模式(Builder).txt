意图：
    将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。
    一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。

主要解决：
    主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
    Abstract Factory模式解决“系列对象”的需求变化，Builder模式解决“对象部分”的需求变化。Builder通常和Composite模式组合使用。

何时使用：
    一些基本部件不会变，而其组合经常变化的时候。

如何解决：
    将变与不变分离开。

关键代码：
    建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。

优点： 
    1、建造者独立，易扩展。 
    2、便于控制细节风险。 
缺点： 
    1、产品必须有共同点，范围有限制。 
    2、如内部变化复杂，会有很多的建造类。 

建造者模式：
    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。
    稳定的：
        使用抽象类或者接口来定义复杂类的初始化的行为；
        使用上述行为的类。
    变化的：
        继承抽象类或者接口的类，其具体实现可能会有剧烈的变化。

    建造者：
	
	1、首先是有一个相对稳定的组合算法Director，使用不同的 建造类 来建造房屋，实现方式由 建造类 实现，这里来决定建造顺序。
	public class Director
    {
        public void Building(Builder builder)
        {
            builder.BuildWall();
            builder.BuildDoor();
            builder.BuildWindows();
        }
    }
	2、同一对象的不同的 建造类
	public class ChineseBuilder : Builder
    {
        House house = new ChineseHouse();
        public override void BuildDoor()
        {
            house.Door = "中式门";
        }
        public override void BuildWall()
        {
            house.Wall = "中式墙";
        }
        public override void BuildWindows()
        {
            house.Windows = "中式窗户";
        }

        public override House GetHouse()
        {
            return house;
        }
    }

	使用：
	    static void Main(string[] args)
        {
            Director director = new Director();

            Builder chBuilder = new ChineseBuilder();
            Builder roBuilder = new RomanBuilder();

            director.Building(chBuilder);
            House chHouse = chBuilder.GetHouse();
            Console.WriteLine(chHouse.Door);
            Console.WriteLine(chHouse.Wall);
            Console.WriteLine(chHouse.Windows);

            Console.WriteLine("-------------------------");

            director.Building(roBuilder);
            House roHouse = roBuilder.GetHouse();
            Console.WriteLine(roHouse.Door);
            Console.WriteLine(roHouse.Wall);
            Console.WriteLine(roHouse.Windows);

            Console.WriteLine("-----------end-----------");
            Console.ReadKey();
        }

	总结：
	建造者模式与抽象工厂类似，有以下感悟：
		1、建造类与工厂类类似，都是使用组合的方式来建造产品，建造类与工厂类及其相似
		2、建造者建造的对象，与抽象工厂建造的对象集有类比倾向，若将 对象集 视为一个对象，则及其类似
		3、建造者模式比抽象工厂模式多了一个组合算法Director类，该类使用 建造类 来进行创建对象，使用时，相当于抽象工厂模式新建一个工厂，在使用组合算法（稳定的）使用工厂类来创建对象
		4、二者的关注点不一样